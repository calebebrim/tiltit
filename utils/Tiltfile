def listdir(path):
    b = local('ls {}'.format(path), quiet=True)
    files = str(b).split('\n')
    return files

def helm_install(values_file, name, chart=None, repo_name=None, repo_url=None, labels=[], namespace='default', resource_deps = [], deps=[], on_exist='skip'):
    """ 
    Install a Helm chart with the specified values file and name.
    """
    if repo_url & repo_name:
        local('helm repo add {} {}'.format(repo_name, repo_url))
        local('helm repo update')

    def get_helm_deployment_status(name):
        """Check if a Helm release is installed."""
        
        status = local('helm status {} | grep STATUS'.format(name), quiet=True)
        return status.strip().split(': ')[1] if status else ""
            
    def helm_deployment_present(name):
        """Check if a Helm release is present."""
        
        status = local('if helm list | grep -q {}; then echo "present"; else echo "missing"; fi'.format(name))
        return str(status).strip()

    status = helm_deployment_present(name)
    print('Helm status for {}: {}'.format(name, status))
    if status == 'present':
        print('Helm release {} already exists, skipping installation.'.format(name))
        if on_exist == 'skip':
            return
        elif on_exist == 'replace':
            local('helm uninstall {}'.format(name))
        else:
            fail('Unknown on_exist option: {}'.format(on_exist))
            return
    deps = deps + [values_file]
    chart = chart or '.'
    local_resource(
        'helm_install_{}'.format(name),
        cmd='helm upgrade --install {} {} --values {} --namespace {}'.format(
            name, chart, values_file, namespace
        ),
        deps=deps,
        resource_deps=resource_deps,
        labels=labels
    )
    
    watch_file(values_file)
    if chart != '.':
        watch_file(chart)

def sts_yaml(name, image, ports=[], envs = {}, command=None, args=None, service_enabled=True, replicas=1):
    
    env_tpl = "env:{envs}"
    env_value_tpl= """\n            - name: {name}\n              value: {value}"""
    
    command_str = "command: [{}]".format(command) if command else ""
    args_str = "args: [{}]".format(args) if args else ""

    env_values_str = ""
    env_str = ""
    if envs.keys():
        env_vars_str = "\n".join([env_value_tpl.format(name=env, value=value) for env, value in envs.items()])
        env_str = env_tpl.format(envs=env_vars_str)
    
    # map ports
    

    container_ports_str = "\n".join(["            - containerPort: {port}".format(port=port.split(":")[1]) for port in ports])
    sts_ports_str = """ports:\n{}""".format(container_ports_str) if ports else ""

    svc_ports_str = "ports:\n{}".format("\n".join(["    - port: {port}\n      targetPort: {port}\n      name: {name}".format(port=port.split(":")[1], name=port.split(":")[0]) for port in ports])) if ports and service_enabled else ""



    service_str = """
---
apiVersion: v1
kind: Service
metadata:
  name: {name}
spec:
  type: ClusterIP
  selector:
    app: {name}
  {ports}
    """.format(name=name, ports=svc_ports_str) if service_enabled else ""
    return blob("""
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {name}
spec:
  replicas: {replicas}
  selector:
    matchLabels:
      app: {name}
  template:
    metadata:
      labels:
        app: {name}
    spec:
      containers:
        - name: {name}
          image: {image}
          {ports}
          {env}
          {command}
          {args}
{service}
    """.format(
        name=name,
        image=image,
        env=env_str,
        command=command_str,
        args=args_str,
        service=service_str,
        ports=sts_ports_str,
        replicas=str(replicas)

    ))

